<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="style/default.xsl"?>

<section title="Showing Images" level="1">

  <p>Images take care of the &quot;visual&quot; part of visual novel.</p>
  
  <sourcecode lang="lvn"><![CDATA[Fading in background, then a sprite
@bgf("background1")
#Each call to img(f) adds a new sprite
@local i = imgf("character1", "r")

Changing background image
@bgtween("background2")

Changing character image
@imgtween(i, "character2")

Fading away and deleting character image
@rmf(i)

Fading away and deleting background
@rmbgf()]]></sourcecode>
    
  <p>To be precise, <code>imgf</code> creates an ImageDrawable and fades it in. An ImageDrawable has a Texture object which contains the pixel data, in this case from an image file. The <code>imgtween</code> function replaces the Texture object with a new one.</p>
    
  <section title="Image Transitions" level="2">
    <p>The <code>imgtween</code> and <code>bgtween</code> functions can be overridden if you want to use a different effect when changing an ImageDrawable's texture. The default effect is a short dissolve.</p>
    
    <p>Animated texture transitions are called tweens. Built-in tween functions can be found in the <code>tween</code> module. The simplest type of transition is the CrossFadeTween which is a straightforward dissolve, making the old texture gradually more transparent while simultaneously fading in the new texture.</p>
    
    <section title="Wipe Tween" level="3">
      <figure src="img/wipetween.png" alt="Wipe Tween" />

      <p>An axis-aligned (up, down, left or right) wipe with an optional span parameter. The span determines the size of the semi-transparent area between the old and new texture.</p>
    </section>
    
    <section title="Shutter Tween" level="3">
      <figure src="img/shuttertween.png" alt="Shutter Tween" />

      <p>An axis-aligned (up, down, left or right) shutter transition. A configurable number of bands </p>
    </section>
    
    <section title="Crossfade Tween" level="3">
      <figure src="img/crossfadetween.png" alt="Crossfade (Dissolve) Tween" />
      
      <p>The pixels of A gradually change to those of B.</p>
    </section>
    
    <section title="Bitmap Tween" level="3">
      <figure src="img/bitmaptween.png" alt="Bitmap Tween" />
      
      <p>An image-controlled transition. The lightness/darkness of the control image determine the fade speed of the individual pixels. The wipe/shutter/crossfade tweens can all be emulated using a bitmap tween.</p>
      <p><strong>The bitmap tween requires a graphics chip with fragment shader support to function.</strong> Every somewhat modern graphics chip has fragment shader support but pre-2005 graphics hardware probably lacks shaders. Use a simpler tween as a backup when the bitmap tween isn't available:</p>
      
      <sourcecode lang="lvn"><![CDATA[#Try a bitmap tween, if not possible, do a shutter tween instead
@if not bitmapTween(image, newTexture, "fade/shutter-h") then
@    shutterTween(image, newTexture, 6)
@end]]></sourcecode>

    </section>
    
  </section>
  
  <section title="Multi-Image Dissolve" level="2">
    <p>Tweens work on a single image at a time. If you want to dissolve the entire scene to a new one, you need to use the <code>screen2image</code> function. This function takes a screenshot of the current scene and places it in front of the scene. You can then change the sprites/backgrounds behind it without them being seen. When you've set up the new scene, fade or tween the screenshot to transparent and delete it.</p>
    
    <sourcecode lang="lvn"><![CDATA[#Take screenshot
@local ss = screen2image()
    
#Setup new scene
@rm(sprite1)
@rm(sprite2)
@bg("image2")

#Fade away and destroy the screenshot.
@rmf(ss)]]></sourcecode>
  </section>
  
</section>
