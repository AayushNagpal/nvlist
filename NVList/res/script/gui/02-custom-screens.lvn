
#-------------------------------------------------------------------------------
# Custom choice screen with 'fancy' animations
#-------------------------------------------------------------------------------

Click to show a custom choice screen.
@clearText()

@@

local oldChoice = Screens.choice

local CScreen = {}

function CScreen.new(id, ...)
    return extend(oldChoice.new(id, ...), CScreen)
end

function CScreen:fadeButtons(visible, speed)
    speed = speed or .05

    local targetAlpha = 1
    if not visible then
        targetAlpha = 0
    end
    local dur = 1.0 / speed

    local dx0 = 20
    local dx1 = 0
    if not visible then
        dx0 = dx0 - 20
        dx1 = dx1 - 20
    end
    
	local threads = {}
	for i,b in ipairs(self.buttons) do
		table.insert(threads, newThread(function()
            local bx = b:getX()
            local by = b:getY()
            
            if speed < 1 then
                wait(6 * i)
            end
            
            --Fade while moving
            Anim.par{
                Anim.createTween(b, "alpha", b:getAlpha(), targetAlpha, dur),
                Anim.createTween(b, "pos", {bx+dx0, by}, {bx+dx1, by}, dur),
            }:run()
            b:setPos(bx, by) --Recenter to avoid button position changing
        end))
	end
	update1join(threads)
end

function CScreen:onButtonPressed(index)    
    local d = 60
    local anims = {}
    for i,b in ipairs(self.buttons) do
        if i == index then
            local bounds = {b:getX(), b:getY(), b:getWidth(), b:getHeight()}
            local pad = bounds[4]*.1
            local lbounds = {bounds[1]-pad, bounds[2]-pad, bounds[3]+pad*2, bounds[4]+pad*2}
            --Pulsate, then fade out
            anims[i] = Anim.seq{
                Anim.createTween(b, "bounds", bounds, lbounds, d*.10),
                Anim.createTween(b, "bounds", lbounds, bounds, d*.10),
                Anim.createTween(b, "bounds", bounds, lbounds, d*.10),
                Anim.createTween(b, "bounds", lbounds, bounds, d*.10),
                Anim.createWait(d*.2),
                Anim.createTween(b, "alpha", b:getAlpha(), 0, d*.4),
            }
        else
            --Fade out
            anims[i] = Anim.createTween(b, "alpha", b:getAlpha(), 0, d*.75)
        end
    end
    Anim.par(anims):run()
end

Screens.choice = CScreen
local selected = 0
while selected ~= 3 do
    selected = choice("Show it again", "Once more", "That's enough")
    yield()
end
Screens.choice = oldChoice

@@

#-------------------------------------------------------------------------------
# Custom save screen with 'fancy' animations
#-------------------------------------------------------------------------------

Click to show a customized version of the save screen.
@clearText()

@@

local oldSave = Screens.save

local SaveSlot = {
	slot=1,
	button=nil,
	image=nil,
	label=nil,
	isSave=false,
	empty=true,
	new=false,
	newImage=nil,
	compact=false,
	backgroundImagePath="gui/savescreen#slotButton-"
	}

function SaveSlot.new(self)
	self = extend(SaveSlot, self)
	
	local buttonImagePath = "gui/savescreen#slotButton-"
	if self.compact then
		buttonImagePath = "gui/savescreen#quicksave-"
	end
	local b = button(buttonImagePath)
	b:setToggle(true)
	b:setEnabled(self.isSave or not self.empty)
	
	local l = textimg(self.label)
	--l:setBackgroundColorARGB(0xA0000000)
	l:extendDefaultStyle(createStyle{anchor=2})
	l:setZ(b:getZ() - 10)
	l:setPadding(8)
	l:setVerticalAlign(1)
	
	local i = nil	
	local newI = nil
	if not self.compact then
		if self.screenshot ~= nil then
			i = img(self.screenshot)
		elseif not self.empty then
			i = img("gui/savescreen#noImage")
		end
		if i ~= nil then
			i:setZ(b:getZ() - b:getWidth()/2)	
		end
		
		if self.new and not self.empty then
			newI = img("gui/savescreen#newSave")
			newI:setZ(i:getZ() - 1)
		end
	end

	self.button = b
	self.image = i
	self.label = l
	self.newImage = newI
	
	return self
end

function SaveSlot:destroy()
	destroyValues{self.button, self.image, self.newImage, self.label}
end

function SaveSlot:getBounds()
	return self.button:getBounds()
end

function SaveSlot:setBounds(x, y, w, h)
	local b = self.button
	local l = self.label
	local i = self.image
	
	local scale = math.min(w / b:getUnscaledWidth(), h / b:getUnscaledHeight())
	b:setScale(scale, scale)

	l:extendDefaultStyle(createStyle{fontName="SansSerif", anchor=2, fontSize=scale * 16, shadowDx=1, shadowDy=1})

	if i ~= nil then
		local imgScale = scale * math.min(224 / i:getUnscaledWidth(), 126 / i:getUnscaledHeight())
		i:setScale(imgScale, imgScale)
		
		l:setSize(b:getWidth(), b:getHeight()-i:getHeight())
	else	
		l:setSize(b:getWidth(), b:getHeight())
	end	
	
	b:setPos(x, y)
	l:setPos(x, y + b:getHeight() - l:getHeight())

	if i ~= nil then	
		local pad = (b:getWidth() - i:getWidth())/2
		i:setPos(x + pad, y + pad)
	end		
	
	local newI = self.newImage
	if newI ~= nil then
		if i ~= nil then	
			--Align with top-right of screenshot
			newI:setPos(i:getX() + i:getWidth() - newI:getWidth(), i:getY())
		else
			--Align with top-right of button
			newI:setPos(b:getX() + b:getWidth() - newI:getWidth(), b:getY())
		end
	end	
end

function SaveSlot:update()
end

-- ----------------------------------------------------------------------------

local SaveScreen = {
	isSave=false,
	selected=0,
    startSlot=1,
    endSlot=25,
	metaData=nil, --Meta data Lua table added to the save data.
	newSaveSlot=SaveSlot.new,
	x=0,
	y=0,
	w=screenWidth/2,
	h=screenHeight,
	pad=nil,
	--GUI Components
    viewport=nil,
	saves=nil,
	saveComponents=nil,
	okButton=nil,
	cancelButton=nil,
	}

function SaveScreen.new(self)
	self = extend(SaveScreen, self)
				
	self.pad = self.pad or math.min(self.w, self.h) / 100
				
	self.saves = {}
	self.saveComponents = {}
	
	local okText = "Load"
	if self.isSave then
		okText = "Save"
	end
	
	local cancelText = "Cancel"
	
	self.okButton = button("gui/savescreen#button-")
	self.okButton:setText(okText)
	
	self.cancelButton = button("gui/savescreen#button-")
	self.cancelButton:setText(cancelText)
	
	local sz = self.okButton:getHeight() / 2.5	
	local buttonStyle = createStyle{fontName="SansSerif", fontStyle="bold", fontSize=sz, shadowColor=0}
	self.okButton:extendDefaultStyle(buttonStyle)
	self.cancelButton:extendDefaultStyle(buttonStyle)
    
	self:initSaves()

	return self
end

function SaveScreen:destroy()
	destroyValues{self.okButton, self.cancelButton}
    self:destroyViewport()
end

function SaveScreen:destroyViewport()
	destroyValues(self.saves)
	self.saves = {}
	--destroyValues(self.saveComponents)
	self.saveComponents = {}
    
	if self.viewport ~= nil then
		self.viewport:destroy()
		self.viewport = nil
	end
end

function SaveScreen:layout()
	local x = self.x
	local y = self.y
	local w = self.w
	local h = self.h	
	local ipad = self.pad

	local vpad = h / 7
	local mainW = w-ipad*2
	local mainH = h-ipad*2 - vpad 

    local viewport = self.viewport    
    viewport:setBounds(x+ipad, y+ipad, mainW, mainH)

	local pad = viewport:getPadding()
    doLayout(FlowLayout, pad.left, pad.top, viewport:getInnerWidth()-pad.left-pad.right, 0,
        {cols=1, padding=ipad, anchor=8},
        self.saveComponents)
    viewport:layout()
    
	doLayout(GridLayout, x, y+h-vpad, w, vpad,
        {padding=ipad, pack=5},
		{self.okButton, self.cancelButton})
end

function SaveScreen:initSaves()
    self:destroyViewport()

    local viewport = createViewport()
    viewport:setPadding(screenHeight*.03)
    setViewportScrollBar(viewport)
    setImageLayer(viewport:getLayer())
    
    --local temp = img("white", {size={screenWidth, screenHeight}})
	for pass=1,3 do
		local defaultLabel = "autosave"
		local startSlot = Save.getAutoSaveSlot(1)
		local endSlot = startSlot + getAutoSaveSlots()
        local compact = true
        local sortFunc = function(x, y)
        	return x:getTimestamp() > y:getTimestamp()
        end
		if pass == 2 then
			startSlot = Save.getQuickSaveSlot(1)
			endSlot = startSlot + 1
			defaultLabel = "quicksave"
        elseif pass == 3 then
            startSlot = self.startSlot
            endSlot = self.endSlot
            compact = false
            sortFunc = function(x, y)
                return x:getSlot() > y:getSlot()
            end
            
            if self.isSave then
                local freeSlot = getFreeSaveSlot()
                local ss = self.newSaveSlot{slot=freeSlot, label="New Save", screenshot=tex("gui/savescreen#newSlot"),
                    empty=true, isSave=true, compact=false}
                table.insert(self.saves, ss)
                local lc = toLayoutComponent(ss)
                viewport:add(lc)
			    table.insert(self.saveComponents, lc)
            end
		end

		local saved = Save.getSaves(startSlot, endSlot)
		local sorted = {}
		for _,si in pairs(saved) do
			table.insert(sorted, si)
		end
        table.sort(sorted, sortFunc)
        
		for i=1,endSlot-startSlot do
			local slot = i
			local label = "Empty\n" .. defaultLabel .. " " .. slot
			local empty = true
            local screenshot = nil
            local new = false
			
			local si = sorted[i]
			if si ~= nil then
				slot = si:getSlot()
				empty = false
                if compact then
				    label = defaultLabel .. " " .. i .. "\n" .. si:getDateString()
                else
                    label = si:getLabel()
                    screenshot = si:getScreenshot()
                    new = (getSharedGlobal("vn.save.lastSaved") == i)
                end
			
			    local ss = self.newSaveSlot{slot=slot, label=label, screenshot=screenshot, empty=empty,
				    isSave=self.isSave, new=new, compact=compact}
			    table.insert(self.saves, ss)
			    local lc = toLayoutComponent(ss)
			    viewport:add(lc)
			    table.insert(self.saveComponents, lc)
			end
		end
	end
    
    setImageLayer(nil)
    self.viewport = viewport
end

function SaveScreen:setSelected(s)
	self.selected = s
	for _,save in ipairs(self.saves) do
		save.button:setSelected(save.slot == s)
	end
end

function SaveScreen:run()
	self:layout()

	while not input:consumeCancel() do
		for _,save in ipairs(self.saves) do
			save:update()
			if save.button:consumePress() then
				self:setSelected(save.slot)
				break
			end
		end
		
		self.okButton:setEnabled(self.selected ~= 0)
		if self.okButton:consumePress() then
			break
		elseif self.cancelButton:consumePress() then
			self.selected = 0
			break
		end
		
		local scrollY = self.viewport:getScrollY()
		for i,lc in ipairs(self.saveComponents) do
			self.saves[i]:setBounds(lc:getX(), lc:getY(), lc:getWidth(), lc:getHeight())
		end
		
		yield()
	end
	
	return self.selected, self.metaData
end

Screens.save = SaveScreen
saveScreen() --Built-in function that open the save screen
Screens.save = oldSave

@@

#-------------------------------------------------------------------------------
#
#-------------------------------------------------------------------------------

@require("gui/gallery") --Import image gallery code
@preloadImageGallery() --Starts preloading images (optional)
Of course you can also make your own user interface screens that aren't based on anything built-in, like this image gallery...
@clearText()

#Show image gallery using only images in the "bg" folder
#Note: Thumbnails are automatically used if correctly named (aaa.jpg -> aaa-thumb.jpg)
@imageGallery("bg/", {rows=2, cols=3})

Image gallery destroyed.
