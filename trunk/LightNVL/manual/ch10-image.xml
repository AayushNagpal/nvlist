<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="style/default.xsl"?>

<section title="Images" level="1">

  <p>Images are stored in <code>res/img</code> and its subfolders. Multiple image folders may exist, their names should always start with <code>img</code>. Each image folder stores images scaled to a specific resolution, and the engine chooses the best one based on the current window size. The resource optimizer can generate these scaled image folders for you.</p>

  <section title="Supported Formats" level="2">
    <section title="PNG" level="3">
      <p>PNG is a lossless compression format with support for an alpha channel. It's the most suited image format to use for all images during development. For images without transparency, using JPEG will usually result in a much smaller file and faster load times, but you lose a little bit of quality every time you resave/resize the image. To avoid this, use PNG throughout development and use the resource optimizer in <code>Build.jar</code> to generate an optimized image folder which will automatically convert your images to the most efficient format.</p>
    </section>

    <section title="JPEG" level="3">
      <p>JPEG achieves much higher compression than PNG at the cost of image quality. As mentioned in the previous section it's preferable to work with PNG only during development. The resource optimizer can convert any acceptable images to JPEG automatically. JPEG doesn't support transparency however, so not all images can be stored in this format.</p>
    </section>

    <section title="JNG (JPEG Network Graphics)" level="3">
      <p>This image format stores colors as JPEG, with an optional alpha mask for transparency. JNG typically results in lower file sizes than PNG at the cost of some image quality loss. One major disadvantage is lack of tool support -- few programs can read/write JNG files.</p>
    </section>

    <section title="KTX (Khronos texture format)" level="3">
      <p>This relatively obscure image format can store OpenGL texture data uncompressed. NVList uses premultiplied alpha internally, therefore KTX textures must also be stored premultiplied. This format results in very large files, but due to its simplicity is also extremely fast to load at runtime.</p>
    </section>
  </section>

  <section title="img.xml" level="1">
    <p>Every image folder may contain a file named <code>img.xml</code>. This file stores metadata about the images in the folder. The resource optimizer automatically creates an <code>img.xml</code> with entries for each file. These entries contain the dimensions of each image allowing for slightly faster image loading (a mismatch between the dimensions in <code>img.xml</code> and the actual image dimensions may cause unexpected behavior).</p>
    
    <sourcecode lang="xml"><![CDATA[<images>
  <image filename="choice-button.png" width="768" height="256"
      scaleFilter="linear mipmap, linear">
      
    <subrect id="normal" rect="1,1,766,62" />
    <subrect id="rollover" rect="1,65,766,62" />
    <subrect id="pressed" rect="1,129,766,62" />
    <subrect id="disabled" rect="1,193,766,62" />
  </image>
</images>]]></sourcecode>

    <p>The above XML snippet is an example img.xml with one image entry. The image is <code>choice-button.png</code> in the same folder, the image is <code>768x256</code> and contains 4 images of buttons. These four logically separate images are packed into a single PNG file to save disk space and speed up load time. The <code>subrect</code> elements define the name/position/size of the subimages. In scripts, you can use the subimages as if they were separate image files -- just add <code>#normal</code>, <code>#rollover</code>, etc. to the end of the image filename.</p>
    
    <p>An image tag can also have the optional <code>scaleFilter</code> attribute. This attribute changes how an image is scaled in-engine. You can specify the minification filter, or both a minification and a magnification filter. When specifying both, the two values should be separated by a comma.</p>
    
    <h3>Allowable scale filter values</h3>
    <table>
      <tr>
        <th>Filter↓ \ Use→</th>
        <th style="width: 100px">Minification</th>
        <th style="width: 100px">Magnification</th>
      </tr>
      <tr>
        <th>nearest<br/><span style="font-size: .75em">(GL_NEAREST)</span></th>
        <td class="supported"></td><td class="supported"></td>
      </tr>
      <tr>
        <th>linear<br/><span style="font-size: .75em">(GL_LINEAR)</span></th>
        <td class="supported"></td><td class="supported"></td>
      </tr>
      <tr>
        <th>nearest mipmap<br/><span style="font-size: .75em">(GL_NEAREST_MIPMAP_LINEAR)</span></th>
        <td class="supported"></td><td class="unsupported"></td>
      </tr>
      <tr>
        <th>linear mipmap<br/><span style="font-size: .75em">(GL_LINEAR_MIPMAP_LINEAR)</span></th>
        <td class="supported"></td><td class="unsupported"></td>
      </tr>
    </table>
  </section>
  
</section>