<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="style/default.xsl"?>

<section title="Script Basics" level="1">
  
  <p>Scripts are written in <a href="http://en.wikipedia.org/wiki/Lua_%28programming_language%29">Lua</a> (5.1, <a href="http://www.lua.org/docs.html">documentation</a>). Files ending in <code>.lua</code> are files containing regular Lua code. Files ending in <code>.lvn</code> also contain Lua code, but only the lines starting with <code>@</code>. Lines not starting with a special character are text commands that show up literally in the text box.</p>

  <section title="LVN Syntax" level="2">
    <sourcecode lang="lvn"><![CDATA[@lua_code()

@@
multiline()
lua_code()
local var = "Test"
@@

This is a text line, it shows up on the screen.
This text line [lua_code()] has embedded Lua code between carets.
This text line $var ${var}stringifies embedded variables.

#This is a comment, it doesn't do anything

##
A multiline
comment
##]]></sourcecode>
    <p>In LVN files, lines starting with an <code>@</code> are interpreted as regular Lua code. If you need a block of Lua code, put it between <code>@@</code> lines. Finally, Lua code can be embedded in text lines by putting it between brackets.</p>
  </section>
  
  <section title="Syntax Highlighting Support for Text Editors" level="3">
    <ul>
      <li><a href="res/lvn.lang">gedit</a></li>
      <li><a href="codemirror/mode/lvn/lvn.js">Codemirror</a></li>
    </ul>
  </section>

  <section title="Structure" level="2">
    <p>Script files must be stored in the <code>res/script</code> folder. The script file <code>main.lua</code> is run during startup. <code>main.lua</code> should define at least two functions: <code>main</code> (runs on startup, can be used to show a one-time splash screen) and <code>titlescreen</code> (runs on 'return to title' menu option, game restarts). A default <code>main.lua</code> is included with NVList and automatically included when creating a new project.</p>
  </section>

  <section title="Using Multiple Scripts" level="2">
    <sourcecode lang="lvn"><![CDATA[About to call a script
@call("subscript")
Returned from call

About to jump to a script
@return call("subscript")
This line will never be displayed]]></sourcecode>
    <p>The <code>call</code> function starts running the code in another script. After the script ends, we go back to the script that did the <code>call</code> and continue where we left off. If you do a <code>return call</code>, execution jumps to the subscript forgetting its position in the calling script. This type of &quot;jump&quot; allows the engine to forget and clean up some local state, reducing memory usage.</p>
  </section>

  <section title="Storing Data" level="2">
    <p>The easiest way to store data is in Lua variables. These get automatically stored along with the rest of the game state when you save. There's also a <code>globals</code> object specifically for storing flags/affection points/etc. Remember to reset/clear your globals (whether you store them in Lua or the globals object) when you return to the title screen.</p>

    <sourcecode lang="lvn"><![CDATA[Saving a global
@globals:set("test", 12345)

@local stored = globals:get("test")
Printing value of global: $stored

Clearing globals
@globals:clear()
@local stored = globals:get("test")
Printing value of global: $stored]]></sourcecode>
    
    <p>Both Lua variables and the globals object store per-saveslot state. The <code>setSharedGlobal(name, value)</code>/<code>getSharedGlobal(name)</code> functions can be used to share data between save slots (a typical use would be &quot;route clear&quot; flags).</p>
  </section>
  
</section>
